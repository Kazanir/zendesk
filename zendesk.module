<?php

/**
 * @file
 * The Zendesk module helps you to interact with zendesk using Drupal.
 *
 * authors:
 * Tom Deryckere (Tom.Deryckere@gmail.com)
 * Mark Koester (https://github.com/markwk/zendesk)
 */

/**
 * Implements hook_permission().
 */
function zendesk_permission() {
  return array(
    'configure zendesk' => array(
      'title' => t('Configure Zendesk'),
      'description' => t('Configure Drupal settings to communicate with Zendesk.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function zendesk_menu() {
  // Callback use by zendesk for remote authentication.
  $items['services/zendesk'] = array(
    'title' => 'Zendesk remote authentication',
    'page callback' => 'zendesk_remote_authentication',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/people/zendesk'] = array(
    'title' => 'Zendesk settings',
    'access arguments' => array('configure zendesk'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zendesk_configuration_form'),
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Configure Drupal settings to communicate with Zendesk',
    'file' => 'zendesk.admin.inc',
  );
  return $items;
}

/**
 * Initialization of the zendesk library.
 */
function zendesk_initialize_library() {
  $api_key    = variable_get('zendesk_api_token', '');
  $user       = variable_get('zendesk_api_mail', '');
  $subdomain  = variable_get('zendesk_api_group', '');
  $zd         = new zendesk($api_key, $user, $subdomain);
  return $zd;
}

/**
 * Helper function to retrieve zendesk id of the user.
 */
function _zendesk_get_user($uid) {
  $query = db_select('zendesk_users', 'zu')
      ->fields('zu', array('uid', 'zid'))->condition('zu.uid', $uid, '=');
  $result = $query->execute();
  if ($result->rowCount() <> 0) {
    foreach ($result as $user) {
      return $user->zid;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_user_insert().
 */
function zendesk_user_insert(&$edit, $account, $category) {
  if (variable_get('zendesk_api_sync_users', 0)) {
    zendesk_create_user($account);
  }
}

/**
 * Implements hook_user_update().
 */
function zendesk_user_update(&$edit, $account, $category) {
  if (variable_get('zendesk_api_sync_users', 0)) {
    if ($user_id = _zendesk_get_user($account->uid)) {
      $zd = zendesk_initialize_library();
      $data = array(
        'user' => array(
          'id' => $user_id,
          'name' => format_username($account),
          'email' => $account->mail,
          'role' => 'end-user',
        ),
      );

      // Invoke a alter call to allow other modules to pass data to ZenDesk.
      drupal_alter(array('zendesk_user', 'zendesk_user_update'), $data, $account);

      $data = drupal_json_encode($data);


      $result = $zd->call('/users/' . $user_id, $data, 'PUT');
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function zendesk_user_delete($account) {
  if (variable_get('zendesk_api_sync_users', 0)) {
    if ($user_id = _zendesk_get_user($account->uid)) {
      $zd = zendesk_initialize_library();
      $data = drupal_json_encode(array(
        'user' => array(
          'id' => $user_id,
          'name' => format_username($account),
          'email' => $account->mail,
          'suspended' => TRUE,
        ),
      ));

      // Alter call to omitted since we are destroying the User object.
      $result = $zd->call('/users/' . $user_id, $data, 'PUT');
    }
  }
}

/**
 * Create a user on Zendesk's side.
 *
 * @param object $account
 *   The Drupal user object that we want to create on zendesk.
 *
 * @return mixed
 *   The zendesk's user id if succeeded, FALSE otherwise.
 */
function zendesk_create_user($account) {
  $zd = zendesk_initialize_library();
  $data = array(
    'user' => array(
      'name' => format_username($account),
      'email' => $account->mail,
      'role' => 'end-user',
    ),
  );
  if (variable_get('zendesk_authed_user', FALSE)) {
    $data['user'] += array('verified' => TRUE);
  }

  // Invoke a alter call to allow other modules to pass data to ZenDesk.
  drupal_alter(array('zendesk_user', 'zendesk_user_create'), $data, $account);

  $data = drupal_json_encode($data);

  $result = $zd->call("/users", $data, 'POST');

  if (!empty($result->error)) {
    // Try to handle special case where a user can be on zendesk's side, but
    // not recorded on our table.
    if ($result->error == 'RecordInvalid' && $result->details->email[0]->description == 'Email: ' . $account->mail . ' is already being used by another user') {
      return zendesk_sync_user_back($account);
    }
    watchdog('zendesk', '%description: %error', array(
      '%description' => $result->description,
      '%error' => print_r($result->details, 1),
    ), WATCHDOG_ERROR);
    return FALSE;
  }
  else {
    db_insert('zendesk_users')
      ->fields(array(
        'uid' => $account->uid,
        'zid' => $result->user->id,
      ))
      ->execute();
    return $result->user->id;
  }
}

/**
 * Try to sync user from zendesk on drupal side.
 *
 * If a user already exist on zendesk's side but not our the drupal side, add
 * it in our database.
 *
 * @param object $account
 *   An object containing the user account.
 *
 * @return mixed
 *   Zendesk's user ID if succeeded, FALSE otherwise.
 */
function zendesk_sync_user_back($account) {
  // Look for the user.
  $zd = zendesk_initialize_library();
  $result = $zd->call('/users/search.json?query=' . $account->mail, '', 'GET');
  if (isset($result->users[0]->id)) {
    db_merge('zendesk_users')
       ->fields(array(
         'uid' => $account->uid,
         'zid' => $result->users[0]->id,
       ))
       // On the off-chance that something is wrong and the user has a Zendesk
       // ID already, update it.
       ->key(array('uid' => $account->uid))
       ->execute();
    return $result->users[0]->id;
  }
  else {
    return FALSE;
  }
}

/**
 * Remote authentication script.
 *
 * @see http://developer.zendesk.com/documentation/sso
 * @see https://support.zendesk.com/entries/23675367
 */
function zendesk_remote_authentication() {
  global $user;
  // Check if anonymous, if so redirect to login with destination the path where
  // he comes from.
  if ($user->uid) {
    // Check if user role is allowed to be authenticated.
    if (zendesk_user_has_access($user)) {
      zendesk_authenticate_user();
    }
    else {
      drupal_goto(variable_get('zendesk_no_permission_page', ''));
    }
  }
  else {
    // Make sure we pass along additional info from Zendesk as we goto.
    drupal_goto('user', array('query' => drupal_get_destination()));
  }
}

/**
 * Check if the user may be be authenticated or synced with zendesk.
 */
function zendesk_user_has_access($user) {
  $zendesk_roles = variable_get('zendesk_roles', array());
  if (!array_sum($zendesk_roles)) {
    // No roles are set, give access.
    return TRUE;
  }
  else {
    $keys = array_keys($user->roles);
    foreach ($keys as $key) {
      if ($zendesk_roles[$key] > 0) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Authentication of the user after the user is logged in.
 */
function zendesk_authenticate_user() {
  global $user;

  $token = array(
    'jti'   => sha1($user->uid . REQUEST_TIME . rand()),
    'iat'   => REQUEST_TIME,
    'name'  => format_username($user),
    'email' => $user->mail,
    'external_id' => $user->uid,
  );
  $key = variable_get('zendesk_secret_key', '');
  // Start the query params.
  $query = array();
  $jwt = zendesk_jwt_encode($token, $key);
  $query['jwt'] = $jwt;
  // Add in the passed-along return_to param, if any.
  $current_params = drupal_get_query_parameters();
  if(isset($current_params['return_to'])) {
    $query['return_to'] = $current_params['return_to'];
  }

  // Redirect with attached GET params
  $url = variable_get('zendesk_url', '') . '/access/jwt';
  drupal_goto($url, array('query' => $query));
}

/**
 * Converts and signs a PHP object or array into a JWT string.
 *
 * Taken from PEAR::JWT.
 *
 * @param $payload
 *   PHP object or array.
 * @param $key
 *   The secret key.
 *
 * @return
 *   A signed JWT.
 */
function zendesk_jwt_encode($payload, $key) {
  $header = array(
    'typ' => 'JWT',
    'alg' => 'HS256'
  );
  $segments = array();
  $segments[] = zendesk_urlsafeb64_encode(json_encode($header));
  $segments[] = zendesk_urlsafeb64_encode(json_encode($payload));
  $signing_input = implode('.', $segments);

  $signature = hash_hmac('sha256', $signing_input, $key, true);
  $segments[] = zendesk_urlsafeb64_encode($signature);

  return implode('.', $segments);
}

/**
 * Encodes the given data with urlsafe base64.
 *
 * A base64 encoded string is made urlsafe by replacing '+' with '-',
 * '/' with '_', and removing '='.
 *
 * Taken from PEAR::JWT.
 *
 * @param $data
 *   The data to encode.
 *
 * @return
 *   The encoded string.
 */
function zendesk_urlsafeb64_encode($data) {
  $b64 = base64_encode($data);
  return str_replace(array('+', '/', '\r', '\n', '='), array('-', '_'), $b64);
}

/**
 * Implements hook_advanced_queue_info().
 */
function zendesk_advanced_queue_info() {
  $items['zendesk_incremental_tickets'] = array(
    'label' => t('Zendesk Incremental Tickets Pull'),
    'worker callback' => 'zendesk_incremental_tickets_worker',
    'delete when completed' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function zendesk_cron() {
  // @todo: Update ticket fields definition.
  $zd = zendesk_initialize_library();
  $response = $zd->call('/ticket_fields', '', 'GET');
  if ($response) {
    foreach ($response->ticket_fields as $tf) {
      zendesk_ticket_field_write_record($tf);
    }
  }
  // Make sure that the ticket incremental worker is queued in some non-failed state.
  $result = db_query("SELECT COUNT(*) FROM advancedqueue WHERE name = 'zendesk_incremental_tickets' AND status != 2;")->fetchColumn(0);
  if (!$result) {
    $last_success = db_query("SELECT * FROM advancedqueue WHERE name = 'zendesk_incremental_tickets' AND status = 1 ORDER BY item_id DESC;")->fetchObject();
    $start_time = ($last_success ? unserialize($last_success->data)['start_time'] : 0);

    $data = array(
      'title' => t('Zendesk incremental tickets pull'),
      'start_time' => $start_time,
    );

    $queue = DrupalQueue::get('zendesk_incremental_tickets');
    $queue->createItem($data);
  }
}

/**
 * Write a Zendesk field definition to the database.
 */
function zendesk_ticket_field_write_record($field_def) {
  // Convert values.
  $schema = drupal_get_schema('zendesk_ticket_fields');

  foreach ($schema['fields'] as $field => $info) {
    // Skip the ID field, it does not need to be updated.
    if ($field == 'id') {
      continue;
    }

    if (!property_exists($field_def, $field)) {
      // Skip fields that are missing for any reason.
      continue;
    }

    // Build array of fields to update or insert.
    if (empty($info['serialize'])) {
      $fields[$field] = $field_def->$field;
    }
    else {
      $fields[$field] = serialize($field_def->$field);
    }

    // Type cast to proper datatypes.
    if (isset($field_def->$field) || !empty($info['not null'])) {
      if ($info['type'] == 'int' || $info['type'] == 'serial') {
        $fields[$field] = (int) $fields[$field];
      }
      elseif ($info['type'] == 'float') {
        $fields[$field] = (float) $fields[$field];
      }
      else {
        $fields[$field] = (string) $fields[$field];
      }
    }
  }
  // Assemble merge.
  $query = db_merge('zendesk_ticket_fields')->fields($fields)->key(array('id' => $field_def->id))->execute();
  if (!$query) {
    throw Exception(t('Failed to insert Zendesk ticket field ID: ' . $field_def->id));
  } // @todo: This thing
}

/**
 * Write a ticket record from JSON to the database.
 */
function zendesk_ticket_write_record($ticket) {
  // @todo: This thing
  // Convert values.
  $schema = drupal_get_schema('zendesk_tickets');

  foreach ($schema['fields'] as $field => $info) {
    // Skip the ticket ID field, it does not need to be updated.
    if ($field == 'id') {
      continue;
    }

    if (!property_exists($ticket, $field)) {
      // Skip fields that are missing for any reason.
      continue;
    }

    // Build array of fields to update or insert.
    if ($field == 'created_at' || $field == 'updated_at') {
      $fields[$field] = strtotime($ticket->$field);
    }
    elseif (empty($info['serialize'])) {
      $fields[$field] = $ticket->$field;
    }
    else {
      $fields[$field] = serialize($ticket->$field);
    }

    // Type cast to proper datatypes.
    if (isset($ticket->$field) || !empty($info['not null'])) {
      if ($info['type'] == 'int' || $info['type'] == 'serial') {
        $fields[$field] = (int) $fields[$field];
      }
      elseif ($info['type'] == 'float') {
        $fields[$field] = (float) $fields[$field];
      }
      else {
        $fields[$field] = (string) $fields[$field];
      }
    }
  }
  // Assemble merge.
  $query = db_merge('zendesk_tickets')->fields($fields)->key(array('id' => $ticket->id))->execute();
  if (!$query) {
    throw Exception(t('Failed to insert Zendesk ticket ID: ' . $ticket->id));
  }

  // Write custom field values.
  foreach ($ticket->fields as $field_value) {
    $field_value->field_id = $field_value->id;
    $field_value->ticket_id = $ticket->id;
    zendesk_ticket_field_value_write_record($field_value, $ticket);
  }

  return $query;
}

function zendesk_ticket_field_value_write_record($field_value, $ticket) {
  // Convert values.
  $schema = drupal_get_schema('zendesk_ticket_field_values');

  foreach ($schema['fields'] as $field => $info) {
    // Skip the ID fields, it does not need to be updated.
    if ($field == 'id') {
      continue;
    }

    if (!property_exists($field_value, $field)) {
      // Skip fields that are missing for any reason.
      continue;
    }

    // Build array of fields to update or insert.
    if (empty($info['serialize'])) {
      $fields[$field] = $field_value->$field;
    }
    else {
      $fields[$field] = serialize($field_value->$field);
    }

    // Type cast to proper datatypes.
    if (isset($field_value->$field) || !empty($info['not null'])) {
      if ($info['type'] == 'int' || $info['type'] == 'serial') {
        $fields[$field] = (int) $fields[$field];
      }
      elseif ($info['type'] == 'float') {
        $fields[$field] = (float) $fields[$field];
      }
      else {
        $fields[$field] = (string) $fields[$field];
      }
    }
  }
  // Assemble merge.
  $query = db_merge('zendesk_ticket_field_values')->fields($fields)->key(array('field_id' => $field_value->id, 'ticket_id' => $ticket->id))->execute();
  if (!$query) {
    throw Exception(t('Failed to insert field value ' . $field_value->id . ' for Zendesk ticket ID: ' . $ticket->id));
  }
}

function zendesk_incremental_tickets_worker($item) {
  $success_count = 0;
  $failure_count = 0;
  // If our worker doesn't have a start time, we have to start at the beginning
  // of time. The worker usually records its own new start time, but if not we
  // also allow a global state variable as a backup.
  $start_time = (!empty($item->data['start_time']) ? $item->data['start_time'] : 0);
  $start_time = $start_time ?: variable_get('zendesk_last_incremental_pull', 0);
  $zd = zendesk_initialize_library();
  $url = '/incremental/tickets.json?start_time=' . $start_time;
  do {
    $response = $zd->call($url, '', 'GET');
    if (!is_object($response)) {
      watchdog("zendesk", "Zendesk error response: @response", ["@response" => var_export($response, TRUE)], WATCHDOG_WARNING);
      break;
    }
    $count = $response->count;
    $success_count += $count;
    $url = str_replace($zd->base, '', $response->next_page);
    if (is_array($response->tickets)) {
      foreach ($response->tickets as $ticket) {
        try {
          zendesk_ticket_write_record($ticket);
        }
        catch (Exception $e) {
          $failure_count++;
          $success_count--;
          advancedqueue_log_message(format_string('Invalid ticket exception for ticket ID @id: @message', ['@id' => $ticket->id, '@message' => $e->getMessage()]));
        }
      }
    }

  } while ($count >= 1000);

  $queue = DrupalQueue::get('zendesk_incremental_tickets');

  $item->data['start_time'] = (!empty($response->end_time) ? $response->end_time : time());
  // We want to let the queue item do this, but failures causing a full re-run sucks.
  variable_set('zendesk_incremental_ticket_last_time', $item->data['start_time']);

  $item->created = time() + variable_get('zendesk_incremental_ticket_refresh_timer', 600);
  // We tell the queue processor to not delete this item normally since we are
  // requeueing it. This causes the success to not be logged.
  $item->skip_deletion = TRUE;
  // We requeue ourselves here with a +10 minute go-time and an updated
  // Zendesk increment time.
  $queue->requeueItem($item);

  $params = [
    '@success' => $success_count,
    '@failure' => $failure_count,
  ];

  // We log a message here because the normal operations won't record a message
  // like this on the item status due to our requeueing shenanigans.
  advancedqueue_log_message(format_string("Successfully finished incremental ticket processing run. Logged @success tickets updated successfully and @failure failures.", $params));

  // This causes the success to be logged normally even though the details
  // aren't recorded on the requeued item.
  return ADVANCEDQUEUE_STATUS_SUCCESS;
}

