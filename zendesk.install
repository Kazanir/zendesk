<?php

/**
 * @file
 * Install, update and uninstall functions for the Zendesk module.
 */

/**
 * Implements hook_schema().
 */
function zendesk_schema() {
  $schema['zendesk_users'] = array(
    'description' => "Links the drupal user ids with the zendesk user id's",
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => 0,
        'default' => 0,
        'description' => 'Drupal user id',
      ),
      'zid' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => 0,
        'default' => 0,
        'description' => 'Zendesk user id',
      ),
    ),
    'primary key' => array('uid', 'zid'),
    'indexes' => array(
      'uid' => array('uid'),
    ),
  );

  $schema['zendesk_tickets'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'serialize' => FALSE,
        'binary' => FALSE,
        'default' => '',
      ),
      'external_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => FALSE,
      ),
      'created_at' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated_at' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 191,
        'not null' => TRUE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'subject' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'raw_subject' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'description' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'priority' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'recipient' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'requester_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => FALSE,
      ),
      'submitter_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => FALSE,
      ),
      'assignee_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => FALSE,
      ),
      'organization_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => FALSE,
      ),
      'group_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => FALSE,
      ),
      'collaborator_ids' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'serialize' => TRUE,
        'binary' => FALSE,
      ),
      'forum_topic_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => FALSE,
      ),
      'problem_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => FALSE,
      ),
      'has_incidents' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'due_at' => array(
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tags' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'serialize' => TRUE,
        'binary' => FALSE,
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'unique keys' => array(),
    'indexes' => array(
      'type' => array(
        'type',
      ),
    ),
    'mysql_character_set' => 'utf8mb4',
    'collation' => 'utf8mb4_general_ci',
  );

  $schema['zendesk_ticket_fields'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'raw_title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'description' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'raw_description' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'position' => array(
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'active' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'required' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'collapsed_for_agents' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'regexp_for_validation' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'title_in_portal' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'raw_title_in_portal' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'visible_in_portal' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'editable_in_portal' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'required_in_portal' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tag' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'serialize' => FALSE,
        'binary' => FALSE,
      ),
      'created_at' => array(
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'updated_at' => array(
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'system_field_options' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'serialize' => TRUE,
        'binary' => FALSE,
      ),
      'custom_field_options' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'serialize' => TRUE,
        'binary' => FALSE,
      ),
      'removable' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'unique keys' => array(),
    'indexes' => array(
      'type' => array(
        'type',
      ),
    ),
  );

  $schema['zendesk_ticket_field_values'] = array(
    'fields' => array(
      'ticket_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'field_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'value' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'serialize' => FALSE,
        'binary' => FALSE,
        'default' => '',
      ),
    ),
    'primary key' => array(
      'ticket_id',
      'field_id',
    ),
    'unique keys' => array(),
    'indexes' => array(),
  );

  $schema['zendesk_ticket_metric_events'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'ticket_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'metric' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'serialize' => FALSE,
        'binary' => FALSE,
        'default' => '',
      ),
      'instance_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'serialize' => FALSE,
        'binary' => FALSE,
        'default' => '',
      ),
      'time' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'sla' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'serialize' => TRUE,
        'binary' => FALSE,
      ),
      'status' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'serialize' => TRUE,
        'binary' => FALSE,
      ),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'unique keys' => array(),
    'indexes' => array(),
  );

  $schema['zendesk_jira_links'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'ticket_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'issue_id' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'issue_key' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'created_at' => array(
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'updated_at' => array(
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'unique keys' => array(),
    'indexes' => array(),
  );

  return $schema;
}

/**
 * Add the tickets table.
 */
function zendesk_update_7101(&$sandbox) {
  $schema = zendesk_schema();
  db_create_table('zendesk_tickets', $schema['zendesk_tickets']);
  db_create_table('zendesk_ticket_fields', $schema['zendesk_ticket_fields']);
  db_create_table('zendesk_ticket_field_values', $schema['zendesk_ticket_field_values']);

  return "Added Zendesk tickets tables.";
}

/**
 * Update the users table to use 64-bit ints.
 */
function zendesk_update_7102(&$sandbox) {
  $schema = zendesk_schema();
  db_change_field('zendesk_users', 'zid', 'zid', $schema['zendesk_users']['fields']['zid']);
  db_change_field('zendesk_users', 'uid', 'uid', $schema['zendesk_users']['fields']['uid']);

  return "Updated Zendesk users table.";
}

/**
 * Update the tickets table to user 64-bit IDs and change collation to UTF8MB4
 * in order to support emojis and other Unicode planes in ticket descriptions.
 */
function zendesk_update_7103(&$sandbox) {
  $schema = zendesk_schema();
  // Change all of these fields.
  db_change_field('zendesk_tickets', 'id', 'id', $schema['zendesk_tickets']['fields']['id']);
  db_change_field('zendesk_tickets', 'created_at', 'created_at', $schema['zendesk_tickets']['fields']['created_at']);
  db_change_field('zendesk_tickets', 'updated_at', 'updated_at', $schema['zendesk_tickets']['fields']['updated_at']);
  db_change_field('zendesk_tickets', 'requester_id', 'requester_id', $schema['zendesk_tickets']['fields']['requester_id']);
  db_change_field('zendesk_tickets', 'organization_id', 'organization_id', $schema['zendesk_tickets']['fields']['organization_id']);
  db_change_field('zendesk_tickets', 'assignee_id', 'assignee_id', $schema['zendesk_tickets']['fields']['assignee_id']);
  db_change_field('zendesk_tickets', 'group_id', 'group_id', $schema['zendesk_tickets']['fields']['group_id']);
  db_change_field('zendesk_tickets', 'submitter_id', 'submitter_id', $schema['zendesk_tickets']['fields']['submitter_id']);
  db_change_field('zendesk_tickets', 'forum_topic_id', 'forum_topic_id', $schema['zendesk_tickets']['fields']['forum_topic_id']);
  db_change_field('zendesk_tickets', 'problem_id', 'problem_id', $schema['zendesk_tickets']['fields']['problem_id']);
  db_change_field('zendesk_tickets', 'type', 'type', $schema['zendesk_tickets']['fields']['type']);

  db_change_field('zendesk_ticket_fields', 'id', 'id', $schema['zendesk_ticket_fields']['fields']['id']);

  db_change_field('zendesk_ticket_field_values', 'field_id', 'field_id', $schema['zendesk_ticket_field_values']['fields']['field_id']);
  db_change_field('zendesk_ticket_field_values', 'ticket_id', 'ticket_id', $schema['zendesk_ticket_field_values']['fields']['ticket_id']);

  // Now update the collation. Apparently we have to do this manually??
  db_query("ALTER TABLE {zendesk_tickets} CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;");

  return "Updated integer field sizes and converted field collation to UTF8MB4.";
}

// @TODO: For later.
// /**
//  * Add ticket comment and ticket metric event tables.
//  */
// function zendesk_update_7104(&$sandbox) {
//   $schema = zendesk_schema();
//   db_create_table('zendesk_ticket_comments', $schema['zendesk_ticket_comments']);
//   db_create_table('zendesk_ticket_metric_events', $schema['zendesk_ticket_metric_events']);
//
//   return "Created ticket comment and metric events tables.";
// }

/**
 * Add a primary key to the zendesk_users table, after deduplicating.
 */
function zendesk_update_7104() {
  // Remove duplicate (uid, zid) rows.
  $result = db_query('SELECT uid, zid, COUNT(*) AS c FROM {zendesk_users} GROUP BY uid, zid HAVING c > 1');
  while ($row = $result->fetchAssoc()) {
    // We cannot identify the duplicate rows, we can only delete all rows. This
    // table is merely a cache, so theoretically no data should be lost.
    db_delete('zendesk_users')
      ->condition('uid', $row['uid'])
      ->condition('zid', $row['zid'])
      ->execute();
  }

  // Remove rows where one of the fields is null.
  db_delete('zendesk_users')
    ->condition(db_or()->isNull('uid')->isNull('zid'))
    ->execute();

  // Add the primary key.
  db_add_primary_key('zendesk_users', array('uid', 'zid'));
}

/**
 * Add the Zendesk/JIRA Links table.
 */
function zendesk_update_7105() {
  $schema = zendesk_schema();
  db_create_table('zendesk_jira_links', $schema['zendesk_jira_links']);

  return "Created Zendesk/JIRA links table.";
}

/**
 * Fix database schemas in Jira links table.
 */
function zendesk_update_7106() {
  $schema = zendesk_schema();

  db_query("UPDATE {zendesk_jira_links} SET updated_at = UNIX_TIMESTAMP(LEFT(REPLACE(updated_at, 'T', ' '), 19)), created_at = updated_at WHERE updated_at NOT REGEXP '^[0-9]+$'")->execute();

  db_change_field('zendesk_jira_links', 'updated_at', 'updated_at', $schema['zendesk_jira_links']['fields']['updated_at']);
  db_change_field('zendesk_jira_links', 'created_at', 'created_at', $schema['zendesk_jira_links']['fields']['created_at']);
  return "Fixed timestamp columns in Jira links table.";
}


/**
 * Add user uid and subscription id fields to the zendesk_tickets table.
 */
function zendesk_update_7107() {
  $fields = [];

  $fields = [
    'requester_uid' =>[
      'type' => 'char',
      'length' => 36,
      'not null' => TRUE,
      'default' => '',
      'description' => 'The drupal uid of the requester.',
    ],
    'submitter_uid' => [
      'type' => 'char',
      'length' => 36,
      'not null' => TRUE,
      'default' => '',
      'description' => 'The drupal uid of the submitter',
    ],
    'assignee_uid' => [
      'type' => 'char',
      'length' => 36,
      'not null' => TRUE,
      'default' => '',
      'description' => 'The drupal uid of the assignee.',
    ],
    'subscription_id' => [
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => 'The commerce license entity id.',
    ],
  ];

  foreach ($fields as $key => $field)  {
    if (!db_field_exists('zendesk_tickets', $key)) {
      db_add_field('zendesk_tickets', $key, $field);
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function zendesk_uninstall() {
  variable_del('zendesk_url');
  variable_del('zendesk_api_token');
  variable_del('zendesk_secret_key');
  variable_del('zendesk_api_sync_users');
  variable_del('zendesk_api_group');
  variable_del('zendesk_api_mail');
  variable_del('zendesk_roles');
  variable_del('zendesk_no_permission_page');
}
